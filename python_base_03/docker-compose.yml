version: "3.9"

secrets:
  mongodb_service_name:
    file: ./secrets/mongodb_service_name
  mongodb_root_user:
    file: ./secrets/mongodb_root_user
  mongodb_root_password:
    file: ./secrets/mongodb_root_password
  mongodb_user:
    file: ./secrets/mongodb_user
  mongodb_user_password:
    file: ./secrets/mongodb_user_password
  mongodb_db_name:
    file: ./secrets/mongodb_db_name
  mongodb_port:
    file: ./secrets/mongodb_port
  redis_service_name:
    file: ./secrets/redis_service_name
  redis_host:
    file: ./secrets/redis_host
  redis_port:
    file: ./secrets/redis_port
  flask_service_name:
    file: ./secrets/flask_service_name
  flask_port:
    file: ./secrets/flask_port
  pythonpath:
    file: ./secrets/pythonpath
  app_secret_key:
    file: ./secrets/app_secret_key
  jwt_secret_key:
    file: ./secrets/jwt_secret_key
  encryption_key:
    file: ./secrets/encryption_key
  redis_password:
    file: ./secrets/redis_password
  stripe_secret_key:
    file: ./secrets/stripe_secret_key
  grafana_admin_password:
    file: ./secrets/grafana_admin_password
  vault_token:
    file: ./secrets/vault_token
  temp_dir:
    file: ./secrets/temp_dir

services:
  clear-logs:
    image: alpine:3.18
    volumes:
      - ./tools/logger:/workspace/tools/logger
    command: |
      sh -c '
        echo "----------------------------------------" > /workspace/tools/logger/compose.log
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Starting new compose session" >> /workspace/tools/logger/compose.log
        echo "----------------------------------------" >> /workspace/tools/logger/compose.log
      '
    restart: "no"

  k8s-init:
    depends_on:
      vault:
        condition: service_healthy
      clear-logs:
        condition: service_completed_successfully
    image: docker:24.0-dind
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kind-config.yaml:/workspace/kind-config.yaml:ro
      - ./scripts:/workspace/scripts:ro
      - ./k8s:/workspace/k8s:ro
      - ./tools/logger:/workspace/tools/logger
      - k8s-config:/k8s-config
      - vault-auth-sa-token:/var/run/secrets/kubernetes.io/serviceaccount
    environment:
      - VAULT_ADDR=http://vault:8200
      - KUBECONFIG=/k8s-config/kubeconfig
      - KUBERNETES_API_HOST=vault-auth-control-plane
    networks:
      - vault_internal
      - init_network
      - kind
    command: |
      sh -c '
        exec 1> >(tee -a /workspace/tools/logger/compose.log) 2>&1
        echo "📝 [$(date +%Y-%m-%d\ %H:%M:%S)] Starting k8s initialization..."
        
        # Create service account token directory
        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        chmod 755 /var/run/secrets/kubernetes.io/serviceaccount
        
        # Install basic packages
        apk add --no-cache \
          curl \
          bash \
          git \
          jq \
          netcat-openbsd
        
        # Install kubectl
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/
        
        # Install kind
        echo "Installing kind..."
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
        chmod +x ./kind
        mv ./kind /usr/local/bin/
        
        # Execute initialization script
        /workspace/scripts/k8s-init.sh
        
        # Copy CA certificate to shared volume
        echo "Copying CA certificate..."
        kubectl get configmap -n kube-system kube-root-ca.crt -o jsonpath="{.data['ca\.crt']}" > /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        chmod 644 /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
    restart: "no"

  vault:
    image: hashicorp/vault:1.15
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_API_ADDR: 'http://0.0.0.0:8200'
      VAULT_DEV_ROOT_TOKEN_ID: 'dev-token'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
      KUBERNETES_API_HOST: vault-auth-control-plane
    command: |
      sh -c '
        # Start Vault in dev mode and wait for it to be ready
        vault server -dev &
        
        # Wait for Vault to start
        until vault status; do
          echo "Waiting for Vault to start..."
          sleep 1
        done
        
        # Keep the container running
        exec tail -f /dev/null'
    networks:
      - vault_internal
      - init_network
      - kind
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 2s
    volumes:
      - vault-data:/vault/file
      - k8s-config:/k8s-config:ro
    restart: on-failure

  vault-config:
    build:
      context: .
      dockerfile: vault-config.Dockerfile
    networks:
      - vault_internal
      - init_network
      - kind
    volumes:
      - k8s-config:/k8s-config:ro
      - ${PWD}/secrets:/secrets:ro
      - vault-auth-sa-token:/var/run/secrets/kubernetes.io/serviceaccount:ro
      - ./tools/logger:/workspace/tools/logger
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-token
      - KUBECONFIG=/k8s-config/kubeconfig
      - KUBERNETES_SERVICE_HOST=vault-auth-control-plane
      - KUBERNETES_SERVICE_PORT=6443
    depends_on:
      vault:
        condition: service_healthy
      k8s-init:
        condition: service_completed_successfully
    command: |
      sh -c '
        # Set up logging
        exec 1> >(tee -a /workspace/tools/logger/compose.log)
        exec 2>&1
        
        echo "----------------------------------------"
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Starting Vault configuration process"
        echo "----------------------------------------"
        
        # Run setup scripts
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Running setup-k8s-auth.sh..."
        /app/scripts/setup-k8s-auth.sh
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Running init-vault-secrets.sh..."
        /app/scripts/init-vault-secrets.sh
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] ✅ Vault configuration completed"'
    restart: "no"

  flask_app:
    build:
      context: .
      dockerfile: Dockerfile
    image: silvella/cr_credit_system_flask_app:latest
    container_name: flask
    environment:
      - FLASK_ENV=development
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-token  # For initial setup only, will be replaced by K8s auth
      - VAULT_AUTH_METHOD=kubernetes
      - VAULT_ROLE=flask-auth
      - VAULT_MOUNT_POINT=kubernetes
      - KUBECONFIG=/k8s-config/kubeconfig
      - PYTHONPATH_FILE=/run/secrets/pythonpath
      - MONGODB_SERVICE_NAME_FILE=/run/secrets/mongodb_service_name
      - MONGODB_ROOT_USER_FILE=/run/secrets/mongodb_root_user
      - MONGODB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password
      - MONGODB_DB_NAME_FILE=/run/secrets/mongodb_db_name
      - REDIS_SERVICE_NAME_FILE=/run/secrets/redis_service_name
      - REDIS_HOST_FILE=/run/secrets/redis_host
      - REDIS_PORT_FILE=/run/secrets/redis_port
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - FLASK_SERVICE_NAME_FILE=/run/secrets/flask_service_name
      - FLASK_PORT_FILE=/run/secrets/flask_port
      - APP_SECRET_KEY_FILE=/run/secrets/app_secret_key
      - JWT_SECRET_KEY_FILE=/run/secrets/jwt_secret_key
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - STRIPE_SECRET_KEY_FILE=/run/secrets/stripe_secret_key
    volumes:
      - ./plugins:/app/plugins
      - ./core:/app/core
      - ./static:/app/static
      - ./tools:/app/tools
      - ./utils:/app/utils
      - k8s-config:/k8s-config:ro
      - vault-auth-sa-token:/var/run/secrets/kubernetes.io/serviceaccount:ro
    secrets:
      - mongodb_service_name
      - mongodb_root_user
      - mongodb_root_password
      - mongodb_db_name
      - redis_service_name
      - redis_host
      - redis_port
      - redis_password
      - flask_service_name
      - flask_port
      - pythonpath
      - app_secret_key
      - jwt_secret_key
      - encryption_key
      - stripe_secret_key
    networks:
      - vault_internal
      - cr_credit_system_network
      - kind
      - database_internal
    depends_on:
      vault-config:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: |
      sh -c '
        echo "Waiting for Vault to be ready..."
        until vault status -address=$${VAULT_ADDR}; do
          echo "Vault not ready, retrying in 5 seconds..."
          sleep 5
        done

        echo "Authenticating with Vault using Kubernetes..."
        if ! vault write -address=$${VAULT_ADDR} auth/kubernetes/login role=flask-auth jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token; then
          echo "Failed to authenticate with Vault using Kubernetes. Using default token..."
        fi

        echo "Installing Python dependencies..."
        pip install --no-cache-dir -r /app/requirements.txt
        pip install --no-cache-dir gevent

        echo "Starting Flask application..."
        exec gunicorn -b 0.0.0.0:5000 --worker-class gevent app:app
      '

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    command: ["mongod", "--bind_ip_all"]
    volumes:
      - cr_credit_system_mongodb_data:/data/db
    networks:
      - database_internal
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    volumes:
      - cr_credit_system_redis_data:/data
    networks:
      - database_internal
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:latest
    container_name: cr_credit_system_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - flask_app
    networks:
      - cr_credit_system_network

  prometheus:
    image: prom/prometheus:latest
    container_name: cr_credit_system_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cr_credit_system_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: cr_credit_system_grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./secrets:/run/secrets:ro
    secrets:
      - grafana_admin_password
    ports:
      - "3000:3000"
    networks:
      - cr_credit_system_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:latest
    container_name: cr_credit_system_alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - cr_credit_system_network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  vault_internal:
    name: cr_credit_system_vault_internal
  init_network:
    name: cr_credit_system_init_network
  kind:
    name: kind
    driver: bridge
  cr_credit_system_network:
    name: cr_credit_system_network
    driver: bridge
  database_internal:
    name: cr_credit_system_database_internal
    internal: true

volumes:
  app_secrets:
    driver: local
  cr_credit_system_redis_data:
    name: cr_credit_system_redis_data
  cr_credit_system_mongodb_data:
    name: cr_credit_system_mongodb_data
  prometheus_data:
    name: cr_credit_system_prometheus_data
  grafana_data:
    name: cr_credit_system_grafana_data
  alertmanager_data:
    name: cr_credit_system_alertmanager_data
  k8s-config:
    name: cr_credit_system_k8s_config
  vault-data:
    name: cr_credit_system_vault_data
  vault-auth-sa-token:
    name: vault-auth-sa-token
