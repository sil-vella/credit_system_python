version: "3.9"

secrets:
  mongodb_service_name:
    file: ./secrets/mongodb_service_name
  mongodb_root_user:
    file: ./secrets/mongodb_root_user
  mongodb_root_password:
    file: ./secrets/mongodb_root_password
  mongodb_user:
    file: ./secrets/mongodb_user
  mongodb_user_password:
    file: ./secrets/mongodb_user_password
  mongodb_db_name:
    file: ./secrets/mongodb_db_name
  mongodb_port:
    file: ./secrets/mongodb_port
  redis_service_name:
    file: ./secrets/redis_service_name
  redis_host:
    file: ./secrets/redis_host
  redis_port:
    file: ./secrets/redis_port
  flask_service_name:
    file: ./secrets/flask_service_name
  flask_port:
    file: ./secrets/flask_port
  pythonpath:
    file: ./secrets/pythonpath
  app_secret_key:
    file: ./secrets/app_secret_key
  jwt_secret_key:
    file: ./secrets/jwt_secret_key
  encryption_key:
    file: ./secrets/encryption_key
  redis_password:
    file: ./secrets/redis_password
  stripe_secret_key:
    file: ./secrets/stripe_secret_key
  grafana_admin_password:
    file: ./secrets/grafana_admin_password
  vault_token:
    file: ./secrets/vault_token

services:
  k8s-init:
    image: alpine:3.18
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kind-config.yaml:/workspace/kind-config.yaml:ro
      - ./scripts:/workspace/scripts:ro
      - ./tools/logger:/workspace/tools/logger  # Need write for logs
      - k8s-config:/k8s-config
    environment:
      - VAULT_ADDR=http://vault:8200
      - KUBECONFIG=/k8s-config/kubeconfig
      - KUBERNETES_API_HOST=vault-auth-control-plane
    networks:
      - vault_internal
      - init_network
      - kind
    command: |
      sh -c '
        # Clear existing log file
        echo "" > /workspace/tools/logger/compose.log
        
        exec 1> >(tee -a /workspace/tools/logger/compose.log) 2>&1
        echo "📝 [$(date +%Y-%m-%d\ %H:%M:%S)] Starting k8s initialization..."
        
        # Create temporary directory for script execution
        TEMP_DIR=$(mktemp -d)
        echo "📋 Creating temporary workspace at $TEMP_DIR"
        
        # Copy script to temp directory and make it executable
        cp /workspace/scripts/k8s-init.sh $TEMP_DIR/
        chmod +x $TEMP_DIR/k8s-init.sh
        
        # Execute from temp location
        echo "🚀 Executing initialization script..."
        $TEMP_DIR/k8s-init.sh
        
        # Cleanup
        echo "🧹 Cleaning up temporary files..."
        rm -rf $TEMP_DIR
        
        echo "📝 [$(date +%Y-%m-%d\ %H:%M:%S)] K8s initialization completed"'
    restart: "no"  # Only run once

  vault:
    image: hashicorp/vault:1.15
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_API_ADDR: 'http://0.0.0.0:8200'
      VAULT_DEV_ROOT_TOKEN_ID: 'dev-token'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
      KUBERNETES_API_HOST: vault-auth-control-plane
    command: server -dev
    networks:
      - vault_internal
      - init_network
      - kind
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://0.0.0.0:8200"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - vault-data:/vault/file
      - k8s-config:/k8s-config:ro
    depends_on:
      k8s-init:
        condition: service_completed_successfully

  vault-config:
    image: hashicorp/vault:1.15
    networks:
      - vault_internal
      - init_network
      - kind
    volumes:
      - k8s-config:/k8s-config:ro
      - ${PWD}/secrets:/secrets
      - ${PWD}/scripts:/scripts
      - vault-auth-sa-token:/var/run/secrets/kubernetes.io/serviceaccount:ro
      - ./tools/logger:/workspace/tools/logger
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-token
      - KUBECONFIG=/k8s-config/kubeconfig
      - KUBERNETES_SERVICE_HOST=vault-auth-control-plane
      - KUBERNETES_SERVICE_PORT=6443
    depends_on:
      vault:
        condition: service_healthy
      k8s-init:
        condition: service_completed_successfully
    command: |
      sh -c '
        # Set up logging
        exec 1> >(tee -a /workspace/tools/logger/compose.log)
        exec 2>&1
        
        echo "----------------------------------------"
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Starting Vault configuration process"
        echo "----------------------------------------"
        
        # Install required packages
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Installing required packages..."
        apk add --no-cache curl

        # Install kubectl properly
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/v1.29.2/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] kubectl version: $(kubectl version --client -o yaml)"

        # Wait for Vault to be ready
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Waiting for Vault to be ready..."
        until curl -fs http://vault:8200/v1/sys/health; do
          echo "[$(date "+%Y-%m-%d %H:%M:%S")] Vault not ready, retrying in 5 seconds..."
          sleep 5
        done
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Vault is ready"
        
        # Make scripts executable
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Making initialization scripts executable..."
        chmod +x /scripts/setup-k8s-auth.sh
        chmod +x /scripts/init-vault-secrets.sh
        
        # Run setup scripts
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Running setup-k8s-auth.sh..."
        /scripts/setup-k8s-auth.sh
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Running init-vault-secrets.sh..."
        /scripts/init-vault-secrets.sh
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] ✅ Vault configuration completed"'
    restart: "no"

  flask_app:
    build:
      context: .
      dockerfile: Dockerfile
    image: silvella/cr_credit_system_flask_app:latest
    container_name: flask
    environment:
      - FLASK_ENV=development
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-token  # For initial setup only, will be replaced by K8s auth
      - VAULT_AUTH_METHOD=kubernetes
      - VAULT_ROLE=flask-auth
      - VAULT_MOUNT_POINT=kubernetes
      - KUBECONFIG=/k8s-config/kubeconfig
      - PYTHONPATH_FILE=/run/secrets/pythonpath
      - MONGODB_SERVICE_NAME_FILE=/run/secrets/mongodb_service_name
      - MONGODB_ROOT_USER_FILE=/run/secrets/mongodb_root_user
      - MONGODB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password
      - MONGODB_DB_NAME_FILE=/run/secrets/mongodb_db_name
      - REDIS_SERVICE_NAME_FILE=/run/secrets/redis_service_name
      - REDIS_HOST_FILE=/run/secrets/redis_host
      - REDIS_PORT_FILE=/run/secrets/redis_port
      - FLASK_SERVICE_NAME_FILE=/run/secrets/flask_service_name
      - FLASK_PORT_FILE=/run/secrets/flask_port
      - APP_SECRET_KEY_FILE=/run/secrets/app_secret_key
      - JWT_SECRET_KEY_FILE=/run/secrets/jwt_secret_key
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - STRIPE_SECRET_KEY_FILE=/run/secrets/stripe_secret_key
    volumes:
      - ./plugins:/app/plugins
      - ./core:/app/core
      - ./static:/app/static
      - ./tools:/app/tools
      - ./utils:/app/utils
      - k8s-config:/k8s-config:ro
      - vault-auth-sa-token:/var/run/secrets/kubernetes.io/serviceaccount:ro
    secrets:
      - mongodb_service_name
      - mongodb_root_user
      - mongodb_root_password
      - mongodb_db_name
      - redis_service_name
      - redis_host
      - redis_port
      - flask_service_name
      - flask_port
      - pythonpath
      - app_secret_key
      - jwt_secret_key
      - encryption_key
      - redis_password
      - stripe_secret_key
    depends_on:
      vault-config:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - vault_internal
      - cr_credit_system_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: |
      sh -c '
        echo "Waiting for Vault to be ready..."
        until vault status -address=$${VAULT_ADDR}; do
          echo "Vault not ready, retrying in 5 seconds..."
          sleep 5
        done

        echo "Authenticating with Vault using Kubernetes..."
        if ! vault write -address=$${VAULT_ADDR} auth/kubernetes/login role=flask-auth jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token; then
          echo "Failed to authenticate with Vault using Kubernetes. Using default token..."
        fi

        echo "Installing Python dependencies..."
        pip install --no-cache-dir -r /app/requirements.txt
        pip install --no-cache-dir gevent

        echo "Starting Flask application..."
        exec gunicorn -b 0.0.0.0:5000 --worker-class gevent app:app
      '

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    command: ["mongod", "--bind_ip_all"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: admin
    volumes:
      - cr_credit_system_mongodb_data:/data/db
      - ./secrets:/run/secrets:ro
    secrets:
      - mongodb_root_user
      - mongodb_root_password
      - mongodb_db_name
    ports:
      - "27017:27017"
    networks:
      - cr_credit_system_network
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    command: |
      sh -c '
        REDIS_PASSWORD=$(cat /run/secrets/redis_password)
        redis-server --requirepass "$REDIS_PASSWORD"
      '
    volumes:
      - cr_credit_system_redis_data:/data
      - ./secrets:/run/secrets:ro
    secrets:
      - redis_password
      - redis_service_name
      - redis_host
      - redis_port
    ports:
      - "6379:6379"
    networks:
      - cr_credit_system_network
    healthcheck:
      test: |
        sh -c '
          REDIS_PASSWORD=$(cat /run/secrets/redis_password)
          redis-cli -a "$REDIS_PASSWORD" ping
        '
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: cr_credit_system_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - flask_app
    networks:
      - cr_credit_system_network

  prometheus:
    image: prom/prometheus:latest
    container_name: cr_credit_system_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cr_credit_system_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: cr_credit_system_grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./secrets:/run/secrets:ro
    secrets:
      - grafana_admin_password
    ports:
      - "3000:3000"
    networks:
      - cr_credit_system_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:latest
    container_name: cr_credit_system_alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - cr_credit_system_network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  vault_internal:
    name: cr_credit_system_vault_internal
    driver: bridge
    internal: true
  init_network:
    name: cr_credit_system_init_network
    driver: bridge
  kind:
    name: kind
    external: true
  cr_credit_system_network:
    name: cr_credit_system_network
    driver: bridge

volumes:
  app_secrets:
    driver: local
  cr_credit_system_redis_data:
    name: cr_credit_system_redis_data
  cr_credit_system_mongodb_data:
    name: cr_credit_system_mongodb_data
  prometheus_data:
    name: cr_credit_system_prometheus_data
  grafana_data:
    name: cr_credit_system_grafana_data
  alertmanager_data:
    name: cr_credit_system_alertmanager_data
  k8s-config:
    name: cr_credit_system_k8s_config
  vault-data:
    name: cr_credit_system_vault_data
  vault-auth-sa-token:
    name: vault-auth-sa-token
